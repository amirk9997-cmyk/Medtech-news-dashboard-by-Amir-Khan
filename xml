<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Medical Device Industry News Dashboard</title>
  <style>
    :root {
      --primary: #007bff;
      --secondary: #ddd;
      --text-dark: #333;
      --text-light: #555;
      --bg-light: #f4f4f9;
    }
    body { font-family: Arial, sans-serif; background-color: var(--bg-light); margin: 0; padding: 20px; }
    .container { max-width: 1200px; margin: 0 auto; }
    h1 { text-align: center; color: var(--text-dark); margin-bottom: 20px; }

    .tabs { display: flex; justify-content: center; gap: 20px; margin-bottom: 15px; }
    .tab { padding: 10px 20px; cursor: pointer; background-color: var(--secondary); border-radius: 5px; border: none; font-size: 16px; }
    .tab.active { background-color: var(--primary); color: #fff; }
    .tab:hover { background-color: #5a9bfd; color: #fff; }

    .controls { display: flex; justify-content: center; gap: 15px; margin-bottom: 20px; flex-wrap: wrap; }
    .controls input, .controls select { padding: 8px; font-size: 14px; border: 1px solid #ccc; border-radius: 5px; }

    .meta { text-align: center; color: var(--text-light); margin-bottom: 10px; font-size: 13px; }

    .news-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
    .news-card { background-color: #fff; border: 1px solid #ddd; border-radius: 8px; padding: 15px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); transition: transform 0.2s, border-color 0.2s; }
    .news-card:hover { transform: scale(1.02); border-color: var(--primary); }
    .news-card img { width: 100%; height: 180px; object-fit: cover; border-radius: 5px; margin-bottom: 10px; }
    .news-card h3 { font-size: 20px; margin: 0 0 10px; color: var(--text-dark); }
    .news-card p { font-size: 14px; color: var(--text-light); line-height: 1.5; margin: 0 0 10px; }
    .news-card a { font-size: 14px; color: var(--primary); text-decoration: none; }
    .news-card a:hover { text-decoration: underline; }

    .actions { display: flex; justify-content: center; gap: 10px; margin: 10px 0 20px; }
    .btn { background: var(--primary); color: #fff; border: none; border-radius: 6px; padding: 8px 12px; cursor: pointer; font-size: 14px; }
    .btn.secondary { background: #6c757d; }
    .btn:disabled { opacity: 0.6; cursor: not-allowed; }

    @media (max-width: 600px) {
      .controls { flex-direction: column; align-items: center; }
      .news-grid { grid-template-columns: 1fr; }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Medical Device Industry News</h1>

    <div class="tabs">
      <button class="tab active" onclick="showSection(event, 'global')">Global News</button>
      <button class="tab" onclick="showSection(event, 'indian')">Indian News</button>
    </div>

    <div class="controls">
      <input type="text" id="searchBox" placeholder="ðŸ”Ž Search news..." oninput="filterNews()">
      <select id="categoryFilter" onchange="filterNews()">
        <option value="">All Categories</option>
        <option value="AI">AI</option>
        <option value="M&A">M&A</option>
        <option value="Regulatory">Regulatory</option>
        <option value="Safety">Safety</option>
        <option value="Funding">Funding</option>
        <option value="RSS">From Feed</option>
      </select>
    </div>

    <div class="actions">
      <button class="btn" id="refreshNow">Refresh RSS Now</button>
      <button class="btn secondary" id="downloadZipBtn" title="Download index.html + news.json as a ZIP">Download ZIP</button>
    </div>

    <div class="meta">
      <span id="lastUpdatedGlobal">Global last updated: â€”</span> | <span id="lastUpdatedIndian">Indian last updated: â€”</span>
    </div>

    <div id="global" class="news-grid"></div>
    <div id="indian" class="news-grid" style="display: none;"></div>
  </div>

  <!-- JSZip (for client-side ZIP download) -->
  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js" integrity="sha256-jxqZ8m5U1Xy2H9yYKuQYv7pXKX5JX1c9Cw3QO2YwBz8=" crossorigin="anonymous"></script>

  <script>
    let allNews = { global: [], indian: [] };
    const RSS_GLOBAL = "https://www.medtechdive.com/feeds/news/";
    const RSS_INDIAN = "https://economictimes.indiatimes.com/rss_feed/13358320.cms";
    const PLACEHOLDER_IMG = "https://via.placeholder.com/400x200?text=RSS+News";

    function showSection(event, section) {
      document.querySelectorAll('.news-grid').forEach(grid => grid.style.display = 'none');
      document.getElementById(section).style.display = 'grid';
      document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
      event.target.classList.add('active');
      filterNews();
    }

    async function loadJSONNews() {
      try {
        const response = await fetch('news.json', { cache: 'no-cache' });
        const data = await response.json();
        allNews.global = data.global || [];
        allNews.indian = data.indian || [];
        renderNews();
      } catch (error) {
        console.error("Failed to load JSON news:", error);
      }
    }

    function updateLastUpdated(section) {
      const el = section === 'global' ? document.getElementById('lastUpdatedGlobal') : document.getElementById('lastUpdatedIndian');
      const ts = new Date();
      el.textContent = section.charAt(0).toUpperCase() + section.slice(1) + " last updated: " + ts.toLocaleString();
    }

    async function loadRSSFeed(url, section) {
      try {
        const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}&timestamp=${Date.now()}`);
        const data = await response.json();
        const parser = new DOMParser();
        const xml = parser.parseFromString(data.contents, "text/xml");

        // Remove old RSS entries first
        allNews[section] = allNews[section].filter(item => item.category !== "RSS");

        const items = xml.querySelectorAll("item");
        items.forEach(item => {
          const title = item.querySelector("title")?.textContent?.trim() || "No title";
          const link = item.querySelector("link")?.textContent?.trim() || "#";
          const description = item.querySelector("description")?.textContent?.trim() || "";
          const news = {
            title,
            summary: description,
            source: link,
            image: PLACEHOLDER_IMG,
            category: "RSS"
          };
          allNews[section].unshift(news);
        });

        updateLastUpdated(section);
        renderNews();
      } catch (error) {
        console.error("Failed to load RSS:", error);
      }
    }

    function renderNews() {
      Object.keys(allNews).forEach(section => {
        const grid = document.getElementById(section);
        grid.innerHTML = "";
        allNews[section].forEach(news => {
          const card = document.createElement('div');
          card.className = 'news-card';
          card.setAttribute("data-category", news.category || "");
          card.innerHTML = `
            <img src="${news.image}" alt="${news.title}" loading="lazy">
            <h3>${news.title}</h3>
            <p>${news.summary}</p>
            <p>Source: <a href="${news.source}" target="_blank" rel="nofollow noopener">Read More</a></p>
          `;
          grid.appendChild(card);
        });
      });
      filterNews();
    }

    function filterNews() {
      const searchValue = document.getElementById('searchBox').value.toLowerCase();
      const categoryValue = document.getElementById('categoryFilter').value;

      Object.keys(allNews).forEach(section => {
        const grid = document.getElementById(section);
        grid.querySelectorAll('.news-card').forEach(card => {
          const text = card.innerText.toLowerCase();
          const matchesSearch = text.includes(searchValue);
          const matchesCategory = !categoryValue || (card.dataset.category === categoryValue);
          card.style.display = matchesSearch && matchesCategory ? 'block' : 'none';
        });
      });
    }

    // Manual refresh handler
    document.getElementById('refreshNow').addEventListener('click', async () => {
      await Promise.all([
        loadRSSFeed(RSS_GLOBAL, 'global'),
        loadRSSFeed(RSS_INDIAN, 'indian'),
      ]);
    });

    // Client-side ZIP download (index.html + news.json)
    document.getElementById('downloadZipBtn').addEventListener('click', async () => {
      try {
        const zip = new JSZip();
        // Fetch the current index.html source (this file)
        const htmlResp = await fetch(location.href, { cache: 'no-cache' });
        const htmlText = await htmlResp.text();
        zip.file("index.html", htmlText);

        // Fetch bundled news.json if present
        let jsonText = '';
        try {
          const jsonResp = await fetch('news.json', { cache: 'no-cache' });
          jsonText = await jsonResp.text();
        } catch (e) {
          jsonText = JSON.stringify({ global: [], indian: [] }, null, 2);
        }
        zip.file("news.json", jsonText);

        const blob = await zip.generateAsync({ type: "blob" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "medical-device-news-dashboard.zip";
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      } catch (e) {
        console.error("ZIP download failed:", e);
      }
    });

    // Init and auto-refresh every 20 minutes
    (async function init() {
      await loadJSONNews();
      await Promise.all([
        loadRSSFeed(RSS_GLOBAL, 'global'),
        loadRSSFeed(RSS_INDIAN, 'indian'),
      ]);
      setInterval(() => {
        loadRSSFeed(RSS_GLOBAL, 'global');
        loadRSSFeed(RSS_INDIAN, 'indian');
      }, 1200000);
    })();
  </script>
</body>
</html>
